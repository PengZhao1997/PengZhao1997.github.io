<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵鹏的博客</title>
  
  <subtitle>写下学习的知识，总结阅读的论文，记录遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaopeng0103.github.io/"/>
  <updated>2019-07-07T07:38:24.843Z</updated>
  <id>https://zhaopeng0103.github.io/</id>
  
  <author>
    <name>赵鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未知2018 | 北理、旷视、北大联合提出PAN，用于语义分割</title>
    <link href="https://zhaopeng0103.github.io/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/%E6%9C%AA%E7%9F%A52018-%E5%8C%97%E7%90%86%E3%80%81%E6%97%B7%E8%A7%86%E3%80%81%E5%8C%97%E5%A4%A7%E8%81%94%E5%90%88%E6%8F%90%E5%87%BAPAN%EF%BC%8C%E7%94%A8%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    <id>https://zhaopeng0103.github.io/语义分割/未知2018-北理、旷视、北大联合提出PAN，用于语义分割/</id>
    <published>2019-07-05T11:30:57.000Z</published>
    <updated>2019-07-07T07:38:24.843Z</updated>
    
    <summary type="html">
    
      本文提出了一种金字塔注意力网络（PAN，Pyramid Attention Network），利用图像全局的上下文信息来解决语义分割问题。主要将注意力机制和空间金字塔相结合，来提取准确而密集的特征并获取像素标签。具体来说，引入了一个特征金字塔注意力模块（FPA，Feature Pyramid Attention module），在高层的输出上施加空间金字塔注意力结构，并结合全局池化策略来学习更好的特征表示。此外，利用每个解码器层中的全局注意力上采样模块（GAU，Global Attention Upsample module）得到的全局上下文特征信息，作为低阶特征的指导，以此来筛选不同类别的定位细节。在PASCAL VOC 2012数据集上实现了最先进的性能。
    
    </summary>
    
      <category term="语义分割" scheme="https://zhaopeng0103.github.io/categories/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
    
      <category term="旷视" scheme="https://zhaopeng0103.github.io/tags/%E6%97%B7%E8%A7%86/"/>
    
      <category term="PAN" scheme="https://zhaopeng0103.github.io/tags/PAN/"/>
    
      <category term="语义分割" scheme="https://zhaopeng0103.github.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>WACV2018 | 微软亚研院提出带PAN的基于Mask R-CNN的场景文本检测方法</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/WACV2018-%E5%BE%AE%E8%BD%AF%E4%BA%9A%E7%A0%94%E9%99%A2%E6%8F%90%E5%87%BA%E5%B8%A6PAN%E7%9A%84%E5%9F%BA%E4%BA%8EMask-R-CNN%E7%9A%84%E5%9C%BA%E6%99%AF%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://zhaopeng0103.github.io/文本检测/WACV2018-微软亚研院提出带PAN的基于Mask-R-CNN的场景文本检测方法/</id>
    <published>2019-07-04T10:14:02.000Z</published>
    <updated>2019-07-07T07:17:22.248Z</updated>
    
    <summary type="html">
    
      本文提出了一个基于Mask R-CNN的文本检测方法，可以检测多方向的和曲线文本。为了增强Mask R-CNN用于文本检测任务的特征表示能力，首次将PAN用于Mask R-CNN的主干网络，实验证明PAN可以有效抑制类文本的背景的误报。不足之处是PAN主干网与Mask R-CNN框架的计算量大，速度慢；并且受RPN生成的矩形建议框的限制，对于倾斜的紧邻长文本行预测效果不好。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
      <category term="Mask R-CNN" scheme="https://zhaopeng0103.github.io/tags/Mask-R-CNN/"/>
    
      <category term="PAN" scheme="https://zhaopeng0103.github.io/tags/PAN/"/>
    
      <category term="WACV2018" scheme="https://zhaopeng0103.github.io/tags/WACV2018/"/>
    
      <category term="微软亚研院" scheme="https://zhaopeng0103.github.io/tags/%E5%BE%AE%E8%BD%AF%E4%BA%9A%E7%A0%94%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>曲文检测论文汇总（2018.12.26）</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/%E6%9B%B2%E6%96%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB%EF%BC%882018-12-26%EF%BC%89/"/>
    <id>https://zhaopeng0103.github.io/文本检测/曲文检测论文汇总（2018-12-26）/</id>
    <published>2019-07-02T07:48:24.000Z</published>
    <updated>2019-07-07T07:14:50.323Z</updated>
    
    <summary type="html">
    
      曲线文本检测论文汇总，截止到2018.12.26
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>CVPR2018 | 旷视科技提出通过角点定位与区域分割来检测多方向的文本</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/CVPR2018-%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80%E6%8F%90%E5%87%BA%E9%80%9A%E8%BF%87%E8%A7%92%E7%82%B9%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%8C%BA%E5%9F%9F%E5%88%86%E5%89%B2%E6%9D%A5%E6%A3%80%E6%B5%8B%E5%A4%9A%E6%96%B9%E5%90%91%E7%9A%84%E6%96%87%E6%9C%AC/"/>
    <id>https://zhaopeng0103.github.io/文本检测/CVPR2018-旷视科技提出通过角点定位与区域分割来检测多方向的文本/</id>
    <published>2019-07-01T12:55:35.000Z</published>
    <updated>2019-07-07T07:07:40.731Z</updated>
    
    <summary type="html">
    
      本文提出通过定位文本边界框的角点和分割文本区域来检测场景文本。角点检测是通过一个类似DSSD网络来提取候选文本区域，可以很好的解决文本方向任意、文本长宽比多变的问题。区域分割是利用类似于RFCN划分网格的方式，做位置感知分割，对于检测字符、单词、文本行等多种文本粒度更有帮助。将检测与分割两类方法组合起来，进行综合得分，可以进一步提高检测精度。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="四边形文本" scheme="https://zhaopeng0103.github.io/tags/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E6%96%87%E6%9C%AC/"/>
    
      <category term="旷视" scheme="https://zhaopeng0103.github.io/tags/%E6%97%B7%E8%A7%86/"/>
    
      <category term="角点定位与区域分割" scheme="https://zhaopeng0103.github.io/tags/%E8%A7%92%E7%82%B9%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%8C%BA%E5%9F%9F%E5%88%86%E5%89%B2/"/>
    
      <category term="CVPR2018" scheme="https://zhaopeng0103.github.io/tags/CVPR2018/"/>
    
  </entry>
  
  <entry>
    <title>CNN网络结构的发展：从LeNet到EfficientNet</title>
    <link href="https://zhaopeng0103.github.io/CNN/CNN%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%91%E5%B1%95%EF%BC%9A%E4%BB%8ELeNet%E5%88%B0EfficientNet/"/>
    <id>https://zhaopeng0103.github.io/CNN/CNN网络结构的发展：从LeNet到EfficientNet/</id>
    <published>2019-06-17T11:25:59.000Z</published>
    <updated>2019-07-07T07:07:12.188Z</updated>
    
    <summary type="html">
    
      CNN基本部件介绍与经典网络结构介绍（LeNet5--&gt;AlexNet--&gt;VGG--&gt;Inception--&gt;Xception--&gt;MobileNet--&gt;EffNet--&gt;EfficientNet--&gt;ResNet--&gt;ResNeXt--&gt;DenseNet--&gt;SqueezeNet--&gt;ShuffleNet--&gt;SENet--&gt;SKNet）
    
    </summary>
    
      <category term="CNN" scheme="https://zhaopeng0103.github.io/categories/CNN/"/>
    
    
      <category term="CNN" scheme="https://zhaopeng0103.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>CVPR2019 | 商汤提出金字塔掩模文本检测器：PMTD</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/CVPR2019-%E5%95%86%E6%B1%A4%E6%8F%90%E5%87%BA%E9%87%91%E5%AD%97%E5%A1%94%E6%8E%A9%E6%A8%A1%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%99%A8%EF%BC%9APMTD/"/>
    <id>https://zhaopeng0103.github.io/文本检测/CVPR2019-商汤提出金字塔掩模文本检测器：PMTD/</id>
    <published>2019-06-15T12:26:42.000Z</published>
    <updated>2019-07-07T07:12:06.130Z</updated>
    
    <summary type="html">
    
      本文提出了金字塔掩模文本检测器（PMTD）。首先将文本的形状和位置信息编码到监督训练中，为每一个文本实例预测一个软文本掩模，缓解文本边界区域的一些背景干扰。然后通过平面聚类算法从预测的软文本掩模中找到最合适的金字塔掩模，构建最终的文本行，提升对于不准确的边界框预测的鲁棒性。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="PMTD" scheme="https://zhaopeng0103.github.io/tags/PMTD/"/>
    
      <category term="CVPR2019" scheme="https://zhaopeng0103.github.io/tags/CVPR2019/"/>
    
      <category term="商汤" scheme="https://zhaopeng0103.github.io/tags/%E5%95%86%E6%B1%A4/"/>
    
      <category term="四边形文本" scheme="https://zhaopeng0103.github.io/tags/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>ECCV2018 | 旷视科技提出弯曲文本表示TextSnake</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/ECCV2018-%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80%E6%8F%90%E5%87%BA%E5%BC%AF%E6%9B%B2%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BATextSnake/"/>
    <id>https://zhaopeng0103.github.io/文本检测/ECCV2018-旷视科技提出弯曲文本表示TextSnake/</id>
    <published>2019-05-15T06:14:22.000Z</published>
    <updated>2019-07-08T01:39:37.449Z</updated>
    
    <summary type="html">
    
      针对于场景图像中任意形状的文本实例，本文提出了一种灵活的表示方法（TextSnake）：以对称轴为中心的有向重叠圆盘序列，每个圆盘都有各自的几何属性（半径与方向）。基于这种表示方法的文本检测器在弯曲文本数据集（TotalText和CTW-1500）上获得了较好的结果。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
      <category term="旷视" scheme="https://zhaopeng0103.github.io/tags/%E6%97%B7%E8%A7%86/"/>
    
      <category term="TextSnake" scheme="https://zhaopeng0103.github.io/tags/TextSnake/"/>
    
      <category term="ECCV2018" scheme="https://zhaopeng0103.github.io/tags/ECCV2018/"/>
    
  </entry>
  
  <entry>
    <title>CVPR2019 | NAVER提出字符级别的文本检测网络：CRAFT</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/CVPR2019-NAVER%E6%8F%90%E5%87%BA%E5%AD%97%E7%AC%A6%E7%BA%A7%E5%88%AB%E7%9A%84%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%EF%BC%9ACRAFT/"/>
    <id>https://zhaopeng0103.github.io/文本检测/CVPR2019-NAVER提出字符级别的文本检测网络：CRAFT/</id>
    <published>2019-05-15T06:07:44.000Z</published>
    <updated>2019-07-07T07:08:17.026Z</updated>
    
    <summary type="html">
    
      本文提出了一种字符级别的文本检测方法（CRAFT）。以自下而上的方式，首先定位单个字符区域，然后利用字符间的关系将检测到的字符连接成文本实例。为了克服真实图像（ICDARs数据集）中字符级别标注缺少的情况，提出了一种弱监督学习方法来估计字符级别的GT值，最后利用合成图像中字符级别的标注与上述GT值同时进行训练，在其它任意形状的文本数据集（TotalText和CTW-1500）上表现出了很强的泛化能力（没有fine-tune）。由于卷积滤波器只关注于字内与字间，即使使用较小的感受野，也足够检测长文本。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="CVPR2019" scheme="https://zhaopeng0103.github.io/tags/CVPR2019/"/>
    
      <category term="CRAFT" scheme="https://zhaopeng0103.github.io/tags/CRAFT/"/>
    
      <category term="NAVER" scheme="https://zhaopeng0103.github.io/tags/NAVER/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>CVPR2019 | 百度提出LOMO文本检测算法</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/CVPR2019-%E7%99%BE%E5%BA%A6%E6%8F%90%E5%87%BALOMO%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/"/>
    <id>https://zhaopeng0103.github.io/文本检测/CVPR2019-百度提出LOMO文本检测算法/</id>
    <published>2019-05-15T04:15:26.000Z</published>
    <updated>2019-07-08T01:46:12.499Z</updated>
    
    <summary type="html">
    
      为了解决长文本和任意形状（弯曲、波浪、多方向）文本检测的问题，本文提出了一种文本检测方法LOMO（Look More than Once）。LOMO由DR（direct regression）、IRM（iterative refinement module）和SEM（shape expression module）三个模块组成。DR直接生成四边形的文本提议。IRM迭代式的调整由DR生成的提议，用于解决长文本检测的问题。SEM回归文本区域、文本中心线和边界偏移三种类型的几何性质来重建不规则文本的精确表示，用于解决任意形状文本检测的问题。LOMO可以一种end-to-end的方式训练，同时在多语言的文本检测上也获得了较好的结果。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="CVPR2019" scheme="https://zhaopeng0103.github.io/tags/CVPR2019/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
      <category term="LOMO" scheme="https://zhaopeng0103.github.io/tags/LOMO/"/>
    
      <category term="百度" scheme="https://zhaopeng0103.github.io/tags/%E7%99%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>机器学习与深度学习常见问题总结（下）</title>
    <link href="https://zhaopeng0103.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://zhaopeng0103.github.io/机器学习与深度学习/机器学习与深度学习常见问题总结（下）/</id>
    <published>2019-04-29T13:26:37.000Z</published>
    <updated>2019-04-30T02:49:35.989Z</updated>
    
    <summary type="html">
    
      机器学习与深度学习常见问题总结（下）
    
    </summary>
    
      <category term="机器学习与深度学习" scheme="https://zhaopeng0103.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://zhaopeng0103.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="https://zhaopeng0103.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CVPR2019 | 旷视科技提出PSENet文本检测算法</title>
    <link href="https://zhaopeng0103.github.io/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/CVPR2019-%E6%97%B7%E8%A7%86%E7%A7%91%E6%8A%80%E6%8F%90%E5%87%BAPSENet%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/"/>
    <id>https://zhaopeng0103.github.io/文本检测/CVPR2019-旷视科技提出PSENet文本检测算法/</id>
    <published>2019-04-29T13:23:11.000Z</published>
    <updated>2019-07-07T07:11:05.412Z</updated>
    
    <summary type="html">
    
      本文提出了一个渐进式尺度扩张网络（PSENet）。它对于每一个文本实例生成不同尺度的核，然后逐渐的扩张检测区域从最小尺度的核到更大的直至完整的文本实例，这种方法不仅可以检测任意形状的文本实例，而且能够很容易的将紧邻的文本实例分开。
    
    </summary>
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/categories/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="文本检测" scheme="https://zhaopeng0103.github.io/tags/%E6%96%87%E6%9C%AC%E6%A3%80%E6%B5%8B/"/>
    
      <category term="CVPR2019" scheme="https://zhaopeng0103.github.io/tags/CVPR2019/"/>
    
      <category term="曲线文本" scheme="https://zhaopeng0103.github.io/tags/%E6%9B%B2%E7%BA%BF%E6%96%87%E6%9C%AC/"/>
    
      <category term="PSENet" scheme="https://zhaopeng0103.github.io/tags/PSENet/"/>
    
      <category term="旷视" scheme="https://zhaopeng0103.github.io/tags/%E6%97%B7%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>机器学习与深度学习常见问题总结（上）</title>
    <link href="https://zhaopeng0103.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://zhaopeng0103.github.io/机器学习与深度学习/机器学习与深度学习常见问题总结（上）/</id>
    <published>2019-04-29T11:59:10.000Z</published>
    <updated>2019-04-30T02:47:29.207Z</updated>
    
    <summary type="html">
    
      机器学习与深度学习常见问题总结（上）
    
    </summary>
    
      <category term="机器学习与深度学习" scheme="https://zhaopeng0103.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://zhaopeng0103.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="https://zhaopeng0103.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令大全</title>
    <link href="https://zhaopeng0103.github.io/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://zhaopeng0103.github.io/Linux/Linux常用命令大全/</id>
    <published>2018-12-06T12:49:09.000Z</published>
    <updated>2018-12-06T13:00:24.332Z</updated>
    
    <summary type="html">
    
      Linux常用命令大全
    
    </summary>
    
      <category term="Linux" scheme="https://zhaopeng0103.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zhaopeng0103.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法-任务调度问题</title>
    <link href="https://zhaopeng0103.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://zhaopeng0103.github.io/算法题/贪心算法-任务调度问题/</id>
    <published>2018-12-06T06:12:24.000Z</published>
    <updated>2018-12-06T06:47:06.987Z</updated>
    
    <summary type="html">
    
      一个单位时间任务是恰好需要一个单位时间完成的任务。给定一个单位时间任务的有限集 S 。关于S 的一个时间表用于描述S 中单位时间任务的执行次序。时间表中第 1 个任务从时间 0 开始执行直至时间 1 结束，第 2 个任务从时间 1 开始执行至时间 2 结束，…，第n个任务从时间 n-1 开始执行直至时间 n 结束。具有截止时间和误时惩罚的单位时间任务时间表问题可描述如下：(1) n 个单位时间任务的集合 S = {1,2,…,n}（n ≤ 500）；(2) 任务i的截止时间 d[i], 1 ≤ i ≤ n, 1 ≤ d[i] ≤ n，即要求任务 i 在时间 d[i] 之前结束；(3) 任务 i 的误时惩罚 1 ≤ w[i] ≤ 1000, 1 ≤ i ≤ n, 即任务 i 未在时间 d[i] 之前结束将招致 w[i] 的惩罚；若按时完成则无惩罚。任务时间表问题要求确定 S 的一个时间表（最优时间表）使得总误时惩罚达到最小。
    
    </summary>
    
      <category term="算法题" scheme="https://zhaopeng0103.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="贪心" scheme="https://zhaopeng0103.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法-合并果子</title>
    <link href="https://zhaopeng0103.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E5%90%88%E5%B9%B6%E6%9E%9C%E5%AD%90/"/>
    <id>https://zhaopeng0103.github.io/算法题/贪心算法-合并果子/</id>
    <published>2018-12-04T12:20:03.000Z</published>
    <updated>2018-12-06T06:15:56.174Z</updated>
    
    <summary type="html">
    
      在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。
    
    </summary>
    
      <category term="算法题" scheme="https://zhaopeng0103.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="贪心" scheme="https://zhaopeng0103.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>最大稳定极值区域MSER-Maximally Stable Extrernal Regions</title>
    <link href="https://zhaopeng0103.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/%E6%9C%80%E5%A4%A7%E7%A8%B3%E5%AE%9A%E6%9E%81%E5%80%BC%E5%8C%BA%E5%9F%9FMSER-Maximally-Stable-Extrernal-Regions/"/>
    <id>https://zhaopeng0103.github.io/目标检测与定位/最大稳定极值区域MSER-Maximally-Stable-Extrernal-Regions/</id>
    <published>2018-12-01T17:30:47.000Z</published>
    <updated>2018-12-01T18:29:21.598Z</updated>
    
    <summary type="html">
    
      MSER（Maximally Stable Extrernal Regions）是区域检测中影响最大的算法。
    
    </summary>
    
      <category term="目标检测与定位" scheme="https://zhaopeng0103.github.io/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
    
    
      <category term="MSER" scheme="https://zhaopeng0103.github.io/tags/MSER/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法_最小差距</title>
    <link href="https://zhaopeng0103.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E6%9C%80%E5%B0%8F%E5%B7%AE%E8%B7%9D/"/>
    <id>https://zhaopeng0103.github.io/算法题/贪心算法-最小差距/</id>
    <published>2018-12-01T17:29:01.000Z</published>
    <updated>2018-12-01T18:27:14.205Z</updated>
    
    <summary type="html">
    
      给定一些不同的一位数字，你可以从这些数字中选择若干个，并将它们按一定顺序排列，组成一个整数，把剩下的数字按一定顺序排列，组成另一个整数。组成的整数不能以0开头（除非这个整数只有1位）。例如，给定6个数字，0,1,2,4,6,7，你可以用它们组成一对数10和2467，当然，还可以组成其他的很多对数，比如210和764，204和176。这些对数中两个数差的绝对值最小的是204和176，为28。给定N个不同的0-9之间的数字，请你求出用这些数字组成的每对数中，差的绝对值最小的一对（或多对）数的绝对值是多少？
    
    </summary>
    
      <category term="算法题" scheme="https://zhaopeng0103.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="贪心" scheme="https://zhaopeng0103.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法_旅行</title>
    <link href="https://zhaopeng0103.github.io/%E7%AE%97%E6%B3%95%E9%A2%98/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E6%97%85%E8%A1%8C/"/>
    <id>https://zhaopeng0103.github.io/算法题/贪心算法-旅行/</id>
    <published>2018-12-01T17:26:40.000Z</published>
    <updated>2018-12-04T12:16:55.663Z</updated>
    
    <summary type="html">
    
      某趟列车的最大载客容量为V人，沿途共有n个停靠站，其中始发站为第1站，终点站为第n站。在第1站至第n-1站之间，共有m个团队申请购票搭乘，若规定：（1）对于某个团队的购票申请，要么全部满足，要么全部拒绝，即不允许只满足部分。（2）每个乘客的搭乘费用为其所乘站数。问：应如何选择这些购票申请，能使该趟列车获得最大的搭乘费用？
    
    </summary>
    
      <category term="算法题" scheme="https://zhaopeng0103.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="贪心" scheme="https://zhaopeng0103.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>非极大值抑制NMS(Non-Maximum Suppression)</title>
    <link href="https://zhaopeng0103.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/%E9%9D%9E%E6%9E%81%E5%A4%A7%E5%80%BC%E6%8A%91%E5%88%B6NMS-Non-Maximum-Suppression/"/>
    <id>https://zhaopeng0103.github.io/目标检测与定位/非极大值抑制NMS-Non-Maximum-Suppression/</id>
    <published>2018-11-25T13:13:03.000Z</published>
    <updated>2019-05-15T04:39:58.782Z</updated>
    
    <summary type="html">
    
      利用非极大值抑制算法(NMS)对生成的大量候选框进行后处理，去除冗余的候选框，得到最具代表性的结果，以加快目标检测的效率。
    
    </summary>
    
      <category term="目标检测与定位" scheme="https://zhaopeng0103.github.io/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
    
    
      <category term="NMS" scheme="https://zhaopeng0103.github.io/tags/NMS/"/>
    
  </entry>
  
  <entry>
    <title>交并比IOU(Intersection over Union)</title>
    <link href="https://zhaopeng0103.github.io/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/%E4%BA%A4%E5%B9%B6%E6%AF%94IOU-Intersection-over-Union/"/>
    <id>https://zhaopeng0103.github.io/目标检测与定位/交并比IOU-Intersection-over-Union/</id>
    <published>2018-11-25T12:46:17.000Z</published>
    <updated>2018-11-25T13:58:14.455Z</updated>
    
    <summary type="html">
    
      IOU指两个矩形框面积的交集和并集的比值，它是一个在特定数据集中检测相应物体准确度的测量标准。
    
    </summary>
    
      <category term="目标检测与定位" scheme="https://zhaopeng0103.github.io/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
    
    
      <category term="IOU" scheme="https://zhaopeng0103.github.io/tags/IOU/"/>
    
  </entry>
  
</feed>
