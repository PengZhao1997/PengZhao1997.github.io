<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序设计竞赛:约瑟夫环plus]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E9%A2%98%2F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AFplus%2F</url>
    <content type="text"><![CDATA[Problem C. 约瑟夫环plus时间限制 2000 ms内存限制 64 MB 题目描述考虑经典的约瑟夫环模型：n个人按顺序围成一圈，从第一个人开始报数，从1开始报，报到k这个数的人会被移出去，然后下一个人从1开始重新报数，第n个人报完数之后第1个人接着报数，问整个过程中第1个人报了几次数。 输入数据两个正整数n，k 1&lt;=n&lt;=1000000000000000000 1&lt;=k&lt;=200 输出数据第1个人被移除之前一共报了几次数 样例输入14 4 样例输出13 样例说明注意n需要用long long存 题解cur_number存储第一个人每次轮到他时所报的号，最开始时，第一个人报号的次数res为1，cur_number也为1；从上一次这个人报号到下一次轮到他报号为止为一个周期，在这个周期内有(n + cur_number)/k个人被移出去，这个人报的号更新为(n + cur_number)%k；所以当(n + cur_number)%k=0时，第一个人会被移出去，也就是下一次轮到他时cur_number=0。 AC代码1234567891011121314151617181920212223#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;long long n, k, cur_number, res, temp;int main() &#123; cin &gt;&gt; n &gt;&gt; k; res = 1; cur_number = 1; while (cur_number != 0) &#123; temp = n + cur_number; n -= temp / k; cur_number = temp % k; res++; &#125; cout &lt;&lt; res &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>模拟,程序设计竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序设计竞赛:魔法师排队]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E9%A2%98%2F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E9%AD%94%E6%B3%95%E5%B8%88%E6%8E%92%E9%98%9F%2F</url>
    <content type="text"><![CDATA[Problem B. 魔法师排队时间限制 2000 ms内存限制 64 MB 题目描述有n个魔法师在排队买魔法面包，每个魔法师都有自己的魔力值，用一个正整数表示。 魔法师都不喜欢排队，如果任意时刻某个魔法师发现前面的魔法师的魔力值比自己小，那么这个魔法师就会用法术把前面的人传送到异空间。 请输出有多少个魔法师会被传送到异空间。 输入数据第一行为一个正整数n，代表魔法师的人数。 接下来一行位n个正整数，第i个正整数ai代表队伍中第i个魔法师的魔力值。（第1个魔法师在队头，第n个魔法师在队尾） 1&lt;=n&lt;=1000000 1&lt;=ai&lt;=100000000 输出数据被传送到异空间的魔法师个数 样例输入1254 5 1 3 2 样例输出12 题解一开始的想法是：找从第一个魔法师到最后一个魔法师中的拥有最大魔力值的魔法师 max_index ，那么位于它之前的魔法师都将会被传送走，此具有最大魔力值的魔法师会留下来；接着寻找从 max_index + 1 到最后一个魔法师之间的拥有最大魔力值的魔法师，进行同样的操作，依次循环下去，直到剩下最后一个魔法师为止（最后一个魔法师肯定会留下来）；然而结果却超时了。于是换了种思维方式，既然是位于魔法师前面且比其魔力值小的魔法师会被传送走，那么最后一个魔法师肯定会留下来；直接定义一个存储最大魔力值的变量 max_num ，初始化为最后一个魔法师的魔力值，从后向前倒序遍历，如果当前魔法师的魔力值比 max_num 小，那么就把他传送走；否则，更新最大魔力值。 TLE代码1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int maxN = int(1e6 + 10);int n, a[maxN], l, r, max_index, cont;int i;int main() &#123; cin &gt;&gt; n; for (i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;a[i]); &#125; l = 0; r = n; while(l &lt; r) &#123; vector&lt;int&gt; v(a + l, a + r); auto max_value = max_element(v.begin(), v.end()); max_index = distance(begin(v), max_value); cont += max_index; l = l + max_index + 1; &#125; cout &lt;&lt; cont &lt;&lt; endl; return 0;&#125; AC代码1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int maxN = int(1e6 + 10);int n, a[maxN], max_num, cont;int i;int main() &#123; cin &gt;&gt; n; for (i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;a[i]); &#125; max_num = a[n]; for (i = n - 1; i &gt; 0; i--) &#123; if (a[i] &lt; max_num) &#123; cont++; &#125; else &#123; max_num = a[i]; &#125; &#125; cout &lt;&lt; cont &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>模拟,程序设计竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fdefault%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速入门创建一篇新文章1$ hexo new "My New Post" 更多信息请查看： Writing 运行服务1$ hexo server 更多信息请查看： Server 生成静态文件1$ hexo generate 更多信息请查看： Generating 发布到远程站点1$ hexo deploy 更多信息请查看： Deployment 常用命令1234$ hexo clean$ hexo g$ gulp$ hexo d or 1$ hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d 使用github pages服务搭建博客的好处 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台。]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
</search>
